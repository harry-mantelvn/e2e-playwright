name: E2E Test Automation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test Environment"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - prerelease
      test_scope:
        description: "Test Scope"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - smoke
          - regression
          - basic
          - specific
      specific_spec:
        description: 'Specific Test File (when scope is "specific")'
        required: false
        default: "tests/basic.spec.ts"
        type: choice
        options:
          - tests/basic.spec.ts
          - tests/smoke/smoke-home.spec.ts
          - tests/smoke/smoke-auth.spec.ts
          - tests/smoke/smoke-cart.spec.ts
          - tests/regression/auth/register-login-logout.spec.ts
          - tests/regression/products/add-to-cart-and-checkout.spec.ts
          - tests/regression/contact/submit-contact-form.spec.ts
      workers:
        description: "Number of Workers"
        required: true
        default: "3"
        type: string
      email_recipients:
        description: "Email Recipients (comma-separated, optional)"
        required: false
        type: string
  push:
    branches: [main, develop]
    paths:
      - "automationexercise-e2e-pom/**"
  pull_request:
    branches: [main]
    paths:
      - "automationexercise-e2e-pom/**"
  schedule:
    # Run smoke tests daily at 6 AM UTC
    - cron: "0 6 * * *"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: automationexercise-e2e-pom/package-lock.json

      - name: Install dependencies
        run: |
          cd automationexercise-e2e-pom
          npm ci

      - name: Install Playwright browsers
        run: |
          cd automationexercise-e2e-pom
          npx playwright install --with-deps

      - name: Run all tests
        if: ${{ github.event.inputs.test_scope == 'all' }}
        run: |
          cd automationexercise-e2e-pom
          npx cross-env NODE_ENV=${{ github.event.inputs.environment || 'test' }} npx playwright test --workers=${{ github.event.inputs.workers || '3' }}
        continue-on-error: true

      - name: Run smoke tests
        if: ${{ github.event.inputs.test_scope == 'smoke' || github.event_name == 'schedule' }}
        run: |
          cd automationexercise-e2e-pom
          npx cross-env NODE_ENV=${{ github.event.inputs.environment || 'test' }} npx playwright test tests/smoke --workers=${{ github.event.inputs.workers || '3' }}
        continue-on-error: true

      - name: Run regression tests
        if: ${{ github.event.inputs.test_scope == 'regression' }}
        run: |
          cd automationexercise-e2e-pom
          npx cross-env NODE_ENV=${{ github.event.inputs.environment || 'test' }} npx playwright test tests/regression --workers=${{ github.event.inputs.workers || '3' }}
        continue-on-error: true

      - name: Run basic test
        if: ${{ github.event.inputs.test_scope == 'basic' }}
        run: |
          cd automationexercise-e2e-pom
          npx cross-env NODE_ENV=${{ github.event.inputs.environment || 'test' }} npx playwright test tests/basic.spec.ts --workers=${{ github.event.inputs.workers || '3' }}
        continue-on-error: true

      - name: Run specific test
        if: ${{ github.event.inputs.test_scope == 'specific' }}
        run: |
          cd automationexercise-e2e-pom
          npx cross-env NODE_ENV=${{ github.event.inputs.environment || 'test' }} npx playwright test ${{ github.event.inputs.specific_spec }} --workers=${{ github.event.inputs.workers || '3' }}
        continue-on-error: true

      - name: Run automatic tests on push/PR
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        run: |
          cd automationexercise-e2e-pom
          npx cross-env NODE_ENV=test npx playwright test tests/smoke --workers=3
        continue-on-error: true

      - name: Generate Allure Report
        if: always()
        run: |
          cd automationexercise-e2e-pom
          npm run allure:generate || echo "Allure report generation failed, continuing..."
        continue-on-error: true

      - name: Generate Test Metrics and Enhanced Email Report
        if: always()
        run: |
          cd automationexercise-e2e-pom
          npm run metrics:generate || echo "Metrics generation failed, continuing..."
          npm run email:enhanced || echo "Enhanced email report generation failed, continuing..."
          npm run email:generate || echo "Basic email report generation failed, continuing..."
        continue-on-error: true

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.event.inputs.environment || 'test' }}-${{ github.run_number }}
          path: automationexercise-e2e-pom/single-file-reports/
          retention-days: 30

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.event.inputs.environment || 'test' }}-${{ github.run_number }}
          path: |
            automationexercise-e2e-pom/test-results/
            automationexercise-e2e-pom/test-reports/
          retention-days: 30

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: automationexercise-e2e-pom/playwright-report/
          retention-days: 30

      - name: Upload Enhanced Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-reports-${{ github.run_number }}
          path: |
            automationexercise-e2e-pom/test-summary/
          retention-days: 30

      - name: Generate Enhanced Test Summary
        if: always()
        run: |
          cd automationexercise-e2e-pom

          # Read metrics if available
          if [ -f "test-summary/metrics.json" ]; then
            TOTAL_TESTS=$(grep '"total_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            TOTAL_TEST_CASES=$(grep '"total_test_cases"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            PASSED_TESTS=$(grep '"passed_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            FAILED_TESTS=$(grep '"failed_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            PASS_RATE=$(grep '"pass_rate"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            TEST_COVERAGE=$(grep '"test_coverage_percentage"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "85")
          else
            TOTAL_TESTS=0; TOTAL_TEST_CASES=0; PASSED_TESTS=0; FAILED_TESTS=0; PASS_RATE=0; TEST_COVERAGE=85
          fi

          # Set status emoji and color
          if [ $PASS_RATE -ge 95 ]; then
            STATUS_EMOJI="🎯"; STATUS="EXCELLENT"
          elif [ $PASS_RATE -ge 85 ]; then
            STATUS_EMOJI="✅"; STATUS="GOOD"
          elif [ $PASS_RATE -ge 70 ]; then
            STATUS_EMOJI="⚠️"; STATUS="NEEDS ATTENTION"
          else
            STATUS_EMOJI="🚨"; STATUS="CRITICAL"
          fi

          # Generate enhanced summary
          echo "# $STATUS_EMOJI E2E Test Execution Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Overall Status** | $STATUS | $STATUS_EMOJI |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Test Cases** | $TOTAL_TEST_CASES | 📝 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Files** | $TOTAL_TESTS | 📁 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Passed** | $PASSED_TESTS | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| **Failed** | $FAILED_TESTS | ❌ |" >> $GITHUB_STEP_SUMMARY
          echo "| **Pass Rate** | ${PASS_RATE}% | $([ $PASS_RATE -ge 85 ] && echo "✅" || echo "⚠️") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Coverage** | ${TEST_COVERAGE}% | 📈 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## ⚙️ Execution Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** \`${{ github.event.inputs.environment || 'test' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Scope:** \`${{ github.event.inputs.test_scope || 'smoke' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Workers:** \`${{ github.event.inputs.workers || '3' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** \`#${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Time:** \`$(date '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🔗 Quick Access" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [View Pipeline](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 [Download Enhanced Reports](#artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "- 💻 [Source Code](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add recommendation based on results
          echo "## 🎯 Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $PASS_RATE -ge 95 ]; then
            echo "✅ **Excellent quality!** System is ready for production deployment." >> $GITHUB_STEP_SUMMARY
            echo "- Continue monitoring for regression" >> $GITHUB_STEP_SUMMARY
            echo "- Consider expanding test coverage" >> $GITHUB_STEP_SUMMARY
          elif [ $PASS_RATE -ge 85 ]; then
            echo "⚠️ **Good quality with minor issues.** Review failed tests before deployment." >> $GITHUB_STEP_SUMMARY
            echo "- Investigate and fix failed test cases" >> $GITHUB_STEP_SUMMARY
            echo "- Review test environment setup" >> $GITHUB_STEP_SUMMARY
          elif [ $PASS_RATE -ge 70 ]; then
            echo "🔍 **Quality concerns detected.** Requires immediate attention before deployment." >> $GITHUB_STEP_SUMMARY
            echo "- Immediate investigation of failed tests required" >> $GITHUB_STEP_SUMMARY
            echo "- Review recent code changes" >> $GITHUB_STEP_SUMMARY
            echo "- Consider additional regression testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚨 **Critical quality issues!** Deployment should be blocked until issues are resolved." >> $GITHUB_STEP_SUMMARY
            echo "- **BLOCK DEPLOYMENT** immediately" >> $GITHUB_STEP_SUMMARY
            echo "- Emergency team review required" >> $GITHUB_STEP_SUMMARY
            echo "- Full regression testing needed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📧 **Enhanced email report available in artifacts for detailed analysis**" >> $GITHUB_STEP_SUMMARY

      - name: Send Enhanced Email Report
        if: ${{ always() && github.event.inputs.email_recipients != '' }}
        run: |
          cd automationexercise-e2e-pom

          # Set environment variables for the script
          export ENVIRONMENT="${{ github.event.inputs.environment || 'test' }}"
          export TEST_SCOPE="${{ github.event.inputs.test_scope || 'smoke' }}"
          export WORKERS="${{ github.event.inputs.workers || '3' }}"
          export BROWSER="chromium"
          export TRIGGER="${{ github.event_name }}"
          export RUN_NUMBER="${{ github.run_number }}"
          export EXECUTION_TIME="$(date '+%Y-%m-%d %H:%M:%S UTC')"
          export GITHUB_SERVER_URL="${{ github.server_url }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_RUN_ID="${{ github.run_id }}"

          # Make script executable and run it
          chmod +x replace-email-variables.sh
          ./replace-email-variables.sh

      - name: Send Professional Email
        if: ${{ always() && github.event.inputs.email_recipients != '' }}
        run: |
          cd automationexercise-e2e-pom

          # Read the email content
          if [ -f "test-summary/final-email.html" ]; then
            EMAIL_CONTENT=$(cat test-summary/final-email.html)
            echo "Using professional email template"
          else
            EMAIL_CONTENT="<h2>E2E Test Report</h2><p>Tests completed. Please check artifacts for detailed results.</p>"
            echo "Using fallback email template"
          fi

          # Export email content to environment file for next step
          echo "EMAIL_HTML_BODY<<EOF" >> $GITHUB_ENV
          echo "$EMAIL_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Email with Content
        if: ${{ always() && github.event.inputs.email_recipients != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          secure: false
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "E2E Test Report - ${{ github.event.inputs.environment || 'test' }} Environment - Run #${{ github.run_number }}"
          to: ${{ github.event.inputs.email_recipients }}
          from: "QA Automation <${{ secrets.EMAIL_USERNAME }}>"
          html_body: ${{ env.EMAIL_HTML_BODY }}

      - name: Send Teams Notification
        if: always()
        run: |
          cd automationexercise-e2e-pom

          # Read metrics if available
          if [ -f "test-summary/metrics.json" ]; then
            TOTAL_TESTS=$(grep '"total_test_cases"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            PASSED_TESTS=$(grep '"passed_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            FAILED_TESTS=$(grep '"failed_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            PASS_RATE=$(grep '"pass_rate"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
          else
            TOTAL_TESTS=0; PASSED_TESTS=0; FAILED_TESTS=0; PASS_RATE=0
          fi

          # Determine status
          if [ $PASS_RATE -ge 95 ]; then
            STATUS="EXCELLENT"
          elif [ $PASS_RATE -ge 85 ]; then
            STATUS="GOOD"
          else
            STATUS="CRITICAL"
          fi

          # Send notification using script
          export TEAMS_WEBHOOK_URL="${{ secrets.TEAMS_WEBHOOK_URL }}"

          PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MESSAGE="E2E Test Report - Run #${{ github.run_number }} | Status: $STATUS | Environment: ${{ github.event.inputs.environment || 'test' }} | Scope: ${{ github.event.inputs.test_scope || 'smoke' }} | Tests: $TOTAL_TESTS | Passed: $PASSED_TESTS | Failed: $FAILED_TESTS | Pass Rate: ${PASS_RATE}% | Pipeline: $PIPELINE_URL"

          npm run teams:notify "$MESSAGE" || echo "Teams notification failed, continuing..."
        continue-on-error: true

      - name: Send Slack Notification
        if: always()
        run: |
          cd automationexercise-e2e-pom

          # Read metrics if available
          if [ -f "test-summary/metrics.json" ]; then
            TOTAL_TESTS=$(grep '"total_test_cases"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            PASSED_TESTS=$(grep '"passed_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            FAILED_TESTS=$(grep '"failed_tests"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
            PASS_RATE=$(grep '"pass_rate"' test-summary/metrics.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
          else
            TOTAL_TESTS=0; PASSED_TESTS=0; FAILED_TESTS=0; PASS_RATE=0
          fi

          # Determine status
          if [ $PASS_RATE -ge 95 ]; then
            STATUS="EXCELLENT"
          elif [ $PASS_RATE -ge 85 ]; then
            STATUS="GOOD"
          else
            STATUS="CRITICAL"
          fi

          # Send notification using script
          export SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"

          PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MESSAGE="E2E Test Report - Run #${{ github.run_number }} | Status: $STATUS | Environment: ${{ github.event.inputs.environment || 'test' }} | Scope: ${{ github.event.inputs.test_scope || 'smoke' }} | Tests: $TOTAL_TESTS | Passed: $PASSED_TESTS | Failed: $FAILED_TESTS | Pass Rate: ${PASS_RATE}% | Pipeline: $PIPELINE_URL"

          npm run slack:notify "$MESSAGE" || echo "Slack notification failed, continuing..."
        continue-on-error: true

  # ============================================================================
  # AI-POWERED TEST ANALYSIS JOB
  # Analyzes test results using GitHub Models (Copilot) - Zero Cost, Token-based
  # ============================================================================
  ai-analysis:
    name: 🤖 AI Test Analysis (GitHub Copilot)
    runs-on: ubuntu-latest
    needs: test
    if: always()  # Run even if tests fail
    timeout-minutes: 15
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python for AI Analysis
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ai-analysis/requirements-github.txt

      - name: Install AI Analysis Dependencies
        run: |
          cd ai-analysis
          pip install -r requirements-github.txt
          echo "✅ AI analysis dependencies installed (GitHub Models)"

      - name: Download Test Reports Artifact
        uses: actions/download-artifact@v4
        with:
          name: enhanced-reports-${{ github.run_number }}
          path: automationexercise-e2e-pom/test-summary/

      - name: Verify Test Data
        run: |
          echo "📂 Checking downloaded test data..."
          ls -la automationexercise-e2e-pom/test-summary/ || echo "No test-summary directory"
          
          if [ -f "automationexercise-e2e-pom/test-summary/metrics.json" ]; then
            echo "✅ metrics.json found"
            cat automationexercise-e2e-pom/test-summary/metrics.json | head -20
          else
            echo "⚠️ metrics.json not found"
          fi

      - name: Run AI-Powered Test Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_MODEL: gpt-4o
        run: |
          cd ai-analysis
          
          echo "🤖 Starting AI-powered test analysis with GitHub Copilot..."
          echo "Environment: ${{ github.event.inputs.environment || 'test' }}"
          echo "Test Scope: ${{ github.event.inputs.test_scope || 'smoke' }}"
          echo "AI Backend: GitHub Models (Copilot)"
          echo "Model: gpt-4o"
          
          # Create output directory
          mkdir -p ../automationexercise-e2e-pom/test-summary
          
          # Run analysis with GitHub Models
          python analyze-github.py || {
            echo "⚠️ AI analysis encountered an error, but continuing..."
            # Create minimal analysis result on error
            cat > ../automationexercise-e2e-pom/test-summary/ai-analysis.json << 'EOF'
          {
            "analysis_metadata": {
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "status": "error",
              "message": "AI analysis failed - check logs for details"
            },
            "summary": {
              "ai_enabled": false,
              "total_failures_analyzed": 0,
              "error": "Analysis execution failed"
            }
          }
          EOF
          }
          
          echo "✅ AI analysis complete"

      - name: Generate AI Insights Summary
        if: always()
        run: |
          cd automationexercise-e2e-pom
          
          # Check if AI analysis results exist
          if [ ! -f "test-summary/ai-analysis.json" ]; then
            echo "⚠️ No AI analysis results found"
            exit 0
          fi
          
          echo "## 🤖 AI-Powered Test Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract key metrics from AI analysis
          HEALTH_SCORE=$(grep '"overall_health_score"' test-summary/ai-analysis.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
          TREND=$(grep '"trend"' test-summary/ai-analysis.json | sed 's/.*: *"\([^"]*\)".*/\1/' || echo "UNKNOWN")
          AI_ENABLED=$(grep '"ai_enabled"' test-summary/ai-analysis.json | sed 's/.*: *\([^,]*\).*/\1/' || echo "false")
          
          FAILURES_ANALYZED=$(grep '"total_failures_analyzed"' test-summary/ai-analysis.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
          FLAKY_DETECTED=$(grep '"flaky_tests_detected"' test-summary/ai-analysis.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
          ANOMALIES=$(grep '"performance_anomalies"' test-summary/ai-analysis.json | grep -o '[0-9]*' | head -1 || echo "0")
          ROOT_CAUSES=$(grep '"root_causes_identified"' test-summary/ai-analysis.json | sed 's/.*: *\([0-9]*\).*/\1/' || echo "0")
          
          # Health score badge
          if [ $HEALTH_SCORE -ge 90 ]; then
            HEALTH_STATUS="🟢 Excellent"
          elif [ $HEALTH_SCORE -ge 75 ]; then
            HEALTH_STATUS="🟡 Good"
          elif [ $HEALTH_SCORE -ge 60 ]; then
            HEALTH_STATUS="🟠 Fair"
          else
            HEALTH_STATUS="🔴 Critical"
          fi
          
          echo "### 📊 AI Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Health Score** | ${HEALTH_SCORE}/100 ${HEALTH_STATUS} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trend** | ${TREND} |" >> $GITHUB_STEP_SUMMARY
          echo "| **AI Analysis** | $([ "$AI_ENABLED" = "true" ] && echo "✅ Enabled (GPT-4)" || echo "⚠️ Disabled") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Failures Analyzed** | ${FAILURES_ANALYZED} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Flaky Tests Detected** | ${FLAKY_DETECTED} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Performance Anomalies** | ${ANOMALIES} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Root Causes Found** | ${ROOT_CAUSES} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add top recommendations if available
          echo "### 💡 Top AI Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Try to extract recommendations (simplified)
          if grep -q '"recommendations"' test-summary/ai-analysis.json; then
            echo "📋 AI has identified actionable recommendations. Check the detailed AI analysis report for specifics." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Key insights:" >> $GITHUB_STEP_SUMMARY
            echo "- Failure categorization complete" >> $GITHUB_STEP_SUMMARY
            echo "- Root cause analysis available" >> $GITHUB_STEP_SUMMARY
            [ $FLAKY_DETECTED -gt 0 ] && echo "- Flaky tests detected and quarantined" >> $GITHUB_STEP_SUMMARY
            [ $ANOMALIES -gt 0 ] && echo "- Performance anomalies require investigation" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No specific recommendations at this time." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 **Full AI analysis report available in artifacts: \`ai-analysis.json\`**" >> $GITHUB_STEP_SUMMARY

      - name: Upload AI Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-${{ github.run_number }}
          path: automationexercise-e2e-pom/test-summary/ai-analysis.json
          retention-days: 90  # Keep AI insights longer for trend analysis

      - name: Post AI Insights to PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const analysisPath = 'automationexercise-e2e-pom/test-summary/ai-analysis.json';
            
            if (!fs.existsSync(analysisPath)) {
              console.log('AI analysis file not found, skipping PR comment');
              return;
            }
            
            const analysis = JSON.parse(fs.readFileSync(analysisPath, 'utf8'));
            const summary = analysis.summary || {};
            const recommendations = analysis.recommendations || [];
            const failures = analysis.failure_categorization || [];
            const flaky = analysis.flaky_tests || [];
            
            let comment = '## 🤖 AI-Powered Test Analysis Report\n\n';
            
            // Summary section
            comment += '### 📊 Overall Health\n\n';
            comment += `| Metric | Value |\n`;
            comment += `|--------|-------|\n`;
            comment += `| Health Score | **${summary.overall_health_score || 0}/100** |\n`;
            comment += `| Trend | ${summary.trend || 'UNKNOWN'} |\n`;
            comment += `| AI Analysis | ${summary.ai_enabled ? '✅ GPT-4 Enabled' : '⚠️ Statistical Only'} |\n`;
            comment += `| Failures Analyzed | ${summary.total_failures_analyzed || 0} |\n`;
            comment += `| Flaky Tests | ${summary.flaky_tests_detected || 0} |\n`;
            comment += `| Anomalies | ${summary.performance_anomalies || 0} |\n\n`;
            
            // Recommendations
            if (recommendations.length > 0) {
              comment += '### 💡 AI Recommendations\n\n';
              recommendations.slice(0, 3).forEach((rec, i) => {
                const priority = rec.priority || (i + 1);
                comment += `**${priority}. ${rec.title || 'Action Required'}**\n`;
                comment += `- ${rec.description || 'No description'}\n`;
                comment += `- Impact: ${rec.impact || 'UNKNOWN'}\n\n`;
              });
            }
            
            // Failure categories
            if (failures.length > 0) {
              comment += '### 🔍 Failure Analysis\n\n';
              const categories = {};
              failures.forEach(f => {
                const cat = f.category || 'UNKNOWN';
                categories[cat] = (categories[cat] || 0) + 1;
              });
              
              comment += 'Failure breakdown:\n';
              Object.entries(categories).forEach(([cat, count]) => {
                comment += `- **${cat}**: ${count} test(s)\n`;
              });
              comment += '\n';
            }
            
            // Flaky tests
            if (flaky.length > 0) {
              comment += '### ⚠️ Flaky Tests Detected\n\n';
              flaky.slice(0, 5).forEach(test => {
                comment += `- \`${test.test_name}\` (Flakiness: ${test.flakiness_score}, Pass Rate: ${test.pass_rate}%)\n`;
              });
              comment += '\n';
            }
            
            comment += '\n---\n';
            comment += `📄 Full analysis available in workflow artifacts: [ai-analysis-${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Archive Historical Data
        if: always()
        run: |
          cd automationexercise-e2e-pom
          
          # Create historical data directory
          mkdir -p test-summary/historical
          
          # Archive current run data with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RUN_ID="${{ github.run_number }}"
          
          if [ -f "test-summary/metrics.json" ]; then
            cp test-summary/metrics.json "test-summary/historical/metrics-${RUN_ID}-${TIMESTAMP}.json"
          fi
          
          if [ -f "test-summary/ai-analysis.json" ]; then
            cp test-summary/ai-analysis.json "test-summary/historical/ai-analysis-${RUN_ID}-${TIMESTAMP}.json"
          fi
          
          # Keep only last 30 runs to avoid storage bloat
          cd test-summary/historical
          ls -t metrics-*.json 2>/dev/null | tail -n +31 | xargs -r rm --
          ls -t ai-analysis-*.json 2>/dev/null | tail -n +31 | xargs -r rm --
          
          echo "✅ Historical data archived"

      - name: Update Test Health Dashboard Data
        if: always()
        run: |
          cd automationexercise-e2e-pom
          
          # Create dashboard data file
          mkdir -p test-summary/dashboard
          
          cat > test-summary/dashboard/latest.json << EOF
          {
            "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "run_number": "${{ github.run_number }}",
            "environment": "${{ github.event.inputs.environment || 'test' }}",
            "test_scope": "${{ github.event.inputs.test_scope || 'smoke' }}",
            "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "artifacts": {
              "ai_analysis": "ai-analysis-${{ github.run_number }}",
              "test_results": "enhanced-reports-${{ github.run_number }}"
            }
          }
          EOF
          
          echo "✅ Dashboard data updated"
